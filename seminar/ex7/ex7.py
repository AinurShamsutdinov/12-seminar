# –ó–∞–¥–∞–Ω–∏–µ
# üìå –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—Å–ø–µ–ª–∏ —Ä–µ—à–∏—Ç—å –Ω–∞ —Å–µ–º–∏–Ω–∞—Ä–µ.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
# ‚óã –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤.
# ‚óã –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞ CSV –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
#   –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.
# ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 2 –¥–æ 5) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ (–æ—Ç 0 –¥–æ 100).
# ‚óã –¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
#   –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.
import csv


class StudentName:

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def validate(self, value):
        if not isinstance(value, str):
            raise TypeError(f'Value {value} should be string')
        if not value.isalpha():
            raise ValueError(f'Value {value} should contain only letters')
        if not str(value[0]).isupper():
            raise ValueError(f'Value {value} should have first letter in uppercase')


class Grade:

    def __init__(self, min_value: int = None, max_value: int = None):
        self.min_value = min_value
        self.max_value = max_value

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def validate(self, value):
        if not isinstance(value, int):
            raise TypeError(f'Value {value} should be integer')
        if not self.min_value <= value <= self.max_value:
            raise ValueError(f'Value {value} should be between {self.min_value} and {self.max_value}')


class SubjectName:
    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate(value)
        setattr(instance, self.param_name, value)

    def validate(self, value):
        is_subject_in_file = False
        with open('subjects.csv', newline='') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if value == row[0]:
                    is_subject_in_file = True
                    break
        if not is_subject_in_file:
            raise ValueError(f'Value {value} should be in subject.csv file')


class Student:
    subjects = dict()
    tests = dict()
    list_sub = list()
    name = StudentName()
    subject = SubjectName()
    grade = Grade(2, 5)
    test = Grade(1, 100)

    def __init__(self, name):
        self.name = name
        self.subjects = dict()
        self.tests = dict()

    def __repr__(self):
        return f'Student(name={self.name}, grade={self.grade}, tests={self.tests})'

    def add_subject(self, subject, grade):
        self.subject = subject
        self.grade = grade
        if self.subject in self.subjects.keys():
            self.subjects[self.subject].append(self.grade)
        else:
            self.subjects[self.subject] = list()
            self.subjects[self.subject].append(self.grade)

    def add_tests(self, subject, grade):
        self.subject = subject
        if subject in self.tests:
            self.tests[self.subject].append(grade)
        else:
            self.tests[self.subject] = list()
            self.tests[self.subject].append(grade)

    def get_average_test(self):
        average_test = dict()
        average_subj = dict()
        for key, item in self.tests.items():
            average_test[key] = sum(item) / len(item)
        for key, item in self.subjects.items():
            average_subj[key] = sum(item) / len(item)
        return f'Average test scores {average_test}\nAverage subject scores {average_subj}'


if __name__ == '__main__':
    student = Student('Parker')
    student.add_subject('math', 4)
    student.add_subject('math', 5)
    student.add_subject('history', 3)
    student.add_subject('history', 4)
    student.add_subject('chemistry', 4)
    student.add_subject('chemistry', 5)
    student.add_subject('math', 3)
    student.add_subject('math', 4)
    student.add_tests('chemistry', 89)
    student.add_tests('chemistry', 67)
    student.add_tests('chemistry', 75)
    student.add_tests('chemistry', 89)
    student.add_tests('math', 72)
    student.add_tests('math', 67)
    student.add_tests('math', 75)
    student.add_tests('math', 72)
    print(student.get_average_test())
